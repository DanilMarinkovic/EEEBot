#include <Wire.h>

#define I2C_SLAVE_ADDR 0x04 // 4 in hexadecimal

// L298 motor driver pin definitions
#define enA 33  // enableA command line
#define enB 25  // enableB command line
#define INa 26  // channel A direction
#define INb 27  // channel A direction
#define INc 14  // channel B direction
#define INd 12  // channel B direction

// setting up the PWM properties used for the motors
const int freq = 2000;
const int ledChannela = 0;  // assumed as the channel used for the left motor
const int ledChannelb = 1;  // assumed as the channel used for the righteft motor
const int resolution = 8; // 8-bit PWM signal

int servoPin = 13;  //the servo is attached to IO_13 on the ESP32

// setting up the PWM properties of the servo
// as an aside, the control signal of the SG90 servo is a PWM signal with a period of 20ms (50Hz) and the pulse duration has to be between 1ms to 2ms i.e. 5% duty cycle for the minimum angle of 0, and 10% duty cycle for the maximum angle of 180
// it is not recommended that you change any of the four values below
int dutyCycle = 5;
const int servoFrequency = 50;  // 50Hz signal
const int servoChannel = 2;     // channels 0 and 1 are used for the two motors on your EEEBot
const int servoResolution = 12;  // 12-bit PWM signal


void setup() {


  // configure the motor direction control pins as outputs
  pinMode(INa, OUTPUT);
  pinMode(INb, OUTPUT);
  pinMode(INc, OUTPUT);
  pinMode(INd, OUTPUT);
  // pinMode(enA, OUTPUT);
  // pinMode(enB, OUTPUT);  // if defining some pins as PWM, do not set them as OUTPUT!

  // configure LED PWM functionalities
  ledcSetup(ledChannela, freq, resolution);
  ledcSetup(ledChannelb, freq, resolution);
  ledcSetup(servoChannel, servoFrequency, servoResolution); //servo setup on PWM channel 2, 50Hz, 12-bit (0-4095)

  // attach the channel to the GPIO to be controlled
  ledcAttachPin(enA, ledChannela);
  ledcAttachPin(enB, ledChannelb);
  ledcAttachPin(servoPin, servoChannel);

  Wire.begin(I2C_SLAVE_ADDR);   // join i2c bus #4 - on the ESP32 the default I2C pins are 21 (SDA) and 22 (SCL)
  Wire.onReceive(onReceive);    // receive event

  Serial.begin(115200);             // start serial for the output
  Serial.println("ESP32 Running");  // sanity check
}



// this function executes whenever data is received from the master device
void onReceive(int numBytes){
  //Set Up Vars
  int16_t Average=0;
  int count=0;

  //We'll recieve one byte at a time. Stop when none left
  while(Wire.available())
  {
    char c = Wire.read();    // receive a byte as character
    //Create Int from the Byte Array
    Average = c << (8 * count) | Average;
    count++;
   
  }
  //Print the Int out.
 // Serial.print("Average:"); 
 // Serial.println(Average);
  float error;
  error=0-Average;
  float previous_error;
            previous_error=error;
            float error_count;
            error_count+=error;
            float Kp=7;
            float Ki=6;
            float Kd=03.5;
            float u=Kp*error+Ki*error_count+Kd*(error-previous_error);
            int base_speed_left=90;
            int base_speed_right=90;
            float k=0.8;
            int angle=90;
            int x= base_speed_left+k*u;
            int y= base_speed_right-k*u;
            int z= angle+u;
            setSteeringAngle(z);
            runMotors(x, y);
 /* Serial.print("Error:"); 
  Serial.println(error);*/
  Serial.print("Left motor speed:"); 
  Serial.println(x);
    Serial.print("Right motor speed:"); 
  Serial.println(y);
    Serial.print("Angle:"); 
  Serial.println(z);
  
}
// function to clear the I2C bufferA
void emptyBuffer(void){
  Serial.println("Error: I2C Byte Size Mismatch");
  while(Wire.available())
  {
    Wire.read();
  }

}
void loop() {

}


// function to set the steering angle
void setSteeringAngle(int servoAngle){
  //
  dutyCycle = map((constrain(servoAngle, 0, 180)), 0, 204, 205, 410); // contrain() limits the minimum and maximum values to 0 and 180 respectively, map() proportionally scales values between 0 and 180 to values between 205 (5% duty cycle) and 410 (10% duty cycle)
  ledcWrite(servoChannel, dutyCycle); // write the control signal to the PWM
}


// function to run the motors - you may need to modify the HIGH/LOW states to get each wheel to rotate in the desired direction
void runMotors(int leftMotor_speed, int rightMotor_speed){
  // limit the speed value between -255 and 255 as the PWM value can only be between 0 and 255 - the negative is handled below
  leftMotor_speed = constrain(leftMotor_speed, -255, 255);
  rightMotor_speed = constrain(rightMotor_speed, -255, 255);

  // vary the motor speeds - use the absolute value to remove the negative
  ledcWrite(ledChannela, (leftMotor_speed));
  ledcWrite(ledChannelb, (rightMotor_speed));

  // if the speed value is negative, run the motor backwards
  if (leftMotor_speed < 0) {
    digitalWrite(INa, LOW);
    digitalWrite(INb, HIGH);
  }
  // else, run the motor forwards
  else
   {
    digitalWrite(INa, HIGH);
    digitalWrite(INb, LOW);    
  }

  // if the speed value is negative, run the motor backwards
  if (rightMotor_speed < 0) {
    digitalWrite(INc, HIGH);
    digitalWrite(INd, LOW);
  }
  // else run the motor forwards
  else {
    digitalWrite(INc, LOW);
    digitalWrite(INd, HIGH);    
  }
}
